var FilteredList = scfilteredlist;

var itemLabelsShouldBe = function ( _filter ) {
  var args = Array.prototype.slice.call( arguments ).splice( 1 );

  _filter.list.$list.children().should.have.a.lengthOf( args.length );
  args.forEach( function ( _value, _i ) {
    _filter.list.$list.find( ":nth-child(" + ( _i + 1 ) + ")" ).text().should.equal( _value );
  } );
};

describe( "standard tests", function () {

  it( "the plugin should have rendered", function () {
    var $section = $( "section.test" );
    $section.find( "[data-sc-filtered-list]" ).length.should.be.greaterThan( 0 );
    $section.find( ".sc-filtered-list-container" ).length.should.be.greaterThan( 0 );
    $section.find( ".sc-filtered-list-header" ).length.should.be.greaterThan( 0 );
    $section.find( ".sc-filtered-list-input" ).length.should.be.greaterThan( 0 );
  } );

  it( "each filter should have `data` that contains the instantiated `FilteredList` object", function () {

    $( "[data-sc-filtered-list]" ).each( function ( _i, _el ) {
      $( _el ).data( "scfilteredlist" ).should.be.FilteredList;
    } );

  } );

  it( "each filter should be wrapped in a span generated by the lib", function () {
    $( "[data-sc-filtered-list]" ).each( function ( _i, _el ) {
      var $el = $( _el );
      /span/i.test( $el.parent()[ 0 ].tagName ).should.be.true;
      $el.parent().is( ".sc-filtered-list" ).should.be.true;
    } );
  } );

} );